# -*- coding: utf-8 -*-
"""load_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s8-fEMsrUVD_yE6Vb2sIccNr9RoMEwSB
"""

#import cv2
from google.colab.patches import cv2_imshow
import numpy as np
import tensorflow as tf
import tensorflow_hub as hub
from tensorflow.keras.models import load_model
from flask import jsonify,request,Flask
from flask_cors import CORS
import base64

#load model
def loadModel(model_path):
  return tf.keras.models.load_model((model_path), custom_objects={'KerasLayer':hub.KerasLayer})

# predict image
def predict_image(model, img_path):

  input_image = cv2.imread(img_path)

  cv2_imshow(input_image)

  input_image_resize = cv2.resize(input_image, (224,224))

  input_image_scaled = input_image_resize/255

  image_reshaped = np.reshape(input_image_scaled, [1,224,224,3])

  input_prediction = model.predict(image_reshaped)

  print(input_prediction)

  input_pred_label = np.argmax(input_prediction)

  print(input_pred_label)

  if input_pred_label == 0:
    return 'The image represents a Car'

  else:
    return 'The image represents a Dog'

app = Flask(__name__)
app.config["DEBUG"]=True
CORS(app)

a = ""

@app.route('/second',methods=['POST'])
def dgetStr():
    '''a = request.form['file']
    print(a)
    decoded_data=base64.b64decode((a))
    #write the decoded data back to original format in  file
    img_file = open('example.jpeg', 'wb')
    img_file.write(decoded_data)
    img_file.close()'''
    # enter your model path and load model
    model = loadModel('/content/model.h5')
    # enter image path
    result = predict_image(model, '/content/example.jpeg')
    result = predict_image(model, 'dog.jpg')    
    return {'name':str(result)}


@app.route('/second',methods=['GET'])
def getStr():
    return a

app.run()
